    # Open the webcam
    cap = cv2.VideoCapture(0, cv2.CAP_V4L2)

    if not cap.isOpened():
        print("Cannot open webcam")
        sys.exit(1)
    else:
        print("Webcam opened successfully. Initializing face data collection for '{}'.".format(name))
        time.sleep(1)

    print("Collecting face data. Press 'q' to quit early.")

    while count < max_images:
        ret, frame = cap.read()
        if not ret:
            print("Failed to capture frame. Retrying...")
            continue

        # Resize frame for faster detection (scale down by 50%)
        small_frame = cv2.resize(frame, (0, 0), fx=0.5, fy=0.5)
        gray_small = cv2.cvtColor(small_frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray_small, scaleFactor=1.3, minNeighbors=5)

        # Overlay progress info on the original frame
        cv2.putText(frame, f"Images Captured: {count}/{max_images}",
                    (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)

        if len(faces) == 0:
            cv2.putText(frame, "No face detected", (10, 60),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)
        else:
            # Process the first detected face (scale coordinates back to original frame)
            for (x, y, w, h) in faces:
                x_full = int(x * 2)
                y_full = int(y * 2)
                w_full = int(w * 2)
                h_full = int(h * 2)
                cv2.rectangle(frame, (x_full, y_full), (x_full + w_full, y_full + h_full), (255, 0, 0), 2)
                cv2.putText(frame, f"Face detected: {count+1}/{max_images}", (10, 60),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

                # Crop and save the face image
                face_img = frame[y_full:y_full + h_full, x_full:x_full + w_full]
                count += 1
                filename = os.path.join(face_db_dir, f"{name}_{count}.jpg")
                cv2.imwrite(filename, face_img)
                print(f"[{count}/{max_images}] Saved {filename}")
                # Process only the first face in this frame.
                break

        cv2.imshow("Add Face - Press 'q' to Quit", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            print("Exiting early on user request.")
            break

    cap.release()
    cv2.destroyAllWindows()
    print("Face data collection complete. Total images captured:", count)

if __name__ == "__main__":
    main()
